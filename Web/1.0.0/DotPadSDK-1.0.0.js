class DotPadSDK{static deviceMap=new Map;constructor(){this.DOTPAD_PREFIX="DotPad",this.DOTPAD_SERVICE="49535343-fe7d-4ae5-8fa9-9fafd205e455",this.DOTPAD_CHARACTERISTIC="49535343-1e4d-4bd9-ba61-23c647249616",this.ACK_PATTERN=/aa550006(..)0201(..)00.*/,this.NOTI_PATTERN=/aa550006(..)0202(..)00.*/}async request(){const t={filters:[{namePrefix:this.DOTPAD_PREFIX}],optionalServices:[this.DOTPAD_SERVICE]};return await navigator.bluetooth.requestDevice(t)}async connect(t){if(!t)throw new Error("No Bluetooth device selected");const e=await t.gatt.connect(),a=await t.gatt.getPrimaryService(this.DOTPAD_SERVICE),i=await a.getCharacteristic(this.DOTPAD_CHARACTERISTIC),s=e.device.name;return DotPadSDK.deviceMap.set(s,{service:a,characteristic:i}),e.connected}async disconnect(t){return DotPadSDK.deviceMap.has(t)&&DotPadSDK.deviceMap.delete(t),t.gatt.disconnect()}async displayGraphicData(t,e){this.displayFullData(t,e,"graphic")}async displayGraphicLineData(t,e,a,i){this.displayLineData(t,e,a,i,"graphic")}async resetGraphicData(t){const e=DotPadData.getResetData(300);this.displayGraphicData(t,e)}async displayTextData(t,e){const a=DotPadSDK.deviceMap.get(t.name);if(a&&a.characteristic){const t=new BrailleWordWrap(20,e).toWrappHex();DotPadSendModule.setBrailleWordWrapList(t),DotPadSendModule.sendBrailleWordWrap(a.characteristic,1)}else console.error("Device is not connected or characteristic not found")}async resetTextData(t){const e=DotPadSDK.deviceMap.get(t.name);if(e&&e.characteristic){const t=DotPadData.getResetData(20),a=DotPadData.getRequestLineData(0,0,t,!0);await e.characteristic.writeValue(a)}else console.error("Device is not connected or characteristic not found")}async displayFullData(t,e,a){const i=DotPadSDK.deviceMap.get(t.name);if(i&&i.characteristic){let t=[];"graphic"===a?t=DotPadData.getRequestData(e,!1):"text"===a&&(t=DotPadData.getRequestData(e,!0));let s=1;for(let e of t)DotPadSendModule.setSendData(s++,e,!1);await DotPadSendModule.sendNextLine(i.characteristic)}else console.error("Device is not connected or characteristic not found")}async displayLineData(t,e,a,i,s){const o=DotPadSDK.deviceMap.get(t.name);if(o&&o.characteristic){let t=null;"graphic"===s?t=DotPadData.getRequestLineData(e,a,i,!1):"text"===s&&(t=DotPadData.getRequestLineData(e,a,i,!0)),DotPadSendModule.setSendData(e,t,!1),await DotPadSendModule.sendNextLine(o.characteristic)}else console.error("Device is not connected or characteristic not found")}async addListenerKeyEvent(t,e){if(!t)throw new Error("No Bluetooth device connected");const a=DotPadSDK.deviceMap.get(t.name);a.characteristic.startNotifications().then((()=>{console.log("> Notifications started"),a.characteristic.addEventListener("characteristicvaluechanged",(async t=>{const i=new DotPadNotifyModule(t,a.characteristic);i.setAckProcess(),i.setPanningKeyEvent(e),i.setFunctionKeyEvent(e)}))}))}}class DotPadNotifyModule{constructor(t,e){this.ACK_PATTERN=/aa550006(..)0201(..)00.*/,this.NOTI_PATTERN=/aa550006(..)0202(..)00.*/,this.PANNING_KEY="aa55000900031200",this.FUNCTION_KEY="aa55000900033200",this.characteristic=e,this.receiveHexPacket=Array.from(new Uint8Array(t.target.value.buffer)).map((t=>t.toString(16).padStart(2,"0"))).join("")}async setAckProcess(){const t=this.receiveHexPacket.match(this.ACK_PATTERN);if(t){const e=parseInt(t[1],16);DotPadSendModule.setAckData(e,!0),await DotPadSendModule.sendNextLine(this.characteristic)}}setPanningKeyEvent(t){if(this.receiveHexPacket.startsWith(this.PANNING_KEY)){const e=parseInt(this.receiveHexPacket.slice(19,20),16);let a=DotPadSendModule.wordWrapPageNo,i=DotPadSendModule.sendWordWrapList.length;if(4===e){if(a>0&&i>0){let t=a>1?--a:a;DotPadSendModule.sendBrailleWordWrap(this.characteristic,t)}t("0")}else if(2===e){if(a>0&&i>0){let t=a<i?++a:a;DotPadSendModule.sendBrailleWordWrap(this.characteristic,t)}t("5")}}}setFunctionKeyEvent(t){if(this.receiveHexPacket.startsWith(this.FUNCTION_KEY)){const e=parseInt(this.receiveHexPacket.slice(16,17),16);8===e?t("1"):4===e?t("2"):2===e?t("3"):1===e&&t("4")}}}class DotPadSendModule{static sendMapData=new Map;static sendWordWrapList=[];static wordWrapPageNo=-1;static setBrailleWordWrapList(t){this.sendWordWrapList=[];for(let e=0;e<t.length;e++){const a=t[e],i=DotPadData.getRequestLineData(0,0,a,!0);this.sendWordWrapList.push(i)}this.wordWrapPageNo=-1}static async sendBrailleWordWrap(t,e){this.wordWrapPageNo=e;const a=this.sendWordWrapList[e-1];await t.writeValue(a)}static setSendData(t,e,a){this.sendMapData.set(t,{commandData:e,isAck:a})}static setAckData(t,e){let a=this.sendMapData.get(t);a&&(a.isAck=e)}static async sendNextLine(t){let e=this.getNextLineId();if(e>-1){let a=DotPadSendModule.sendMapData.get(e);a&&(await t.writeValue(a.commandData),console.log("nextLineId => "+e))}}static getNextLineId(){let t=-1;for(let e of this.sendMapData.keys()){if(!1===this.sendMapData.get(e).isAck){t=e;break}}return t}}class DotPadData{static getResetData(t){return Array(t).fill("00").join("")}static getRequestData(t,e){const a=DotDataUtil.hexToBytes(t),i=this._getRequestDataChunkList(a,30);return this._getCommandChunkList(i,e)}static getRequestLineData(t,e,a,i){const s=DotDataUtil.hexToBytes(a);return this._getCommandChunkLine(t,e,s,i)}static _getRequestDataChunkList(t,e){const a=[],i=t.length;for(let s=0;s<i;s+=e){const o=s+e,r=t.slice(s,o>i?i:o);a.push(r)}return a}static _getCommandChunkList(t,e){let a=[],i=1;for(const s of t){const t=this._getCommandChunkLine(i,0,s,e);a.push(t),i++}return a}static _getCommandChunkLine(t,e,a,i){const s=[...DotPadProtocol.getSync(),...DotPadProtocol.getLength(a),...DotPadProtocol.getDestId(t),...DotPadProtocol.getCommandType(),...DotPadProtocol.getDisplayMode(i),...DotPadProtocol.getStartCell(e),...DotPadProtocol.getDataBody(a),DotPadProtocol.getCheckSum(DotPadProtocol.getDestId(t),DotPadProtocol.getCommandType(),DotPadProtocol.getDisplayMode(i),DotPadProtocol.getStartCell(e),DotPadProtocol.getDataBody(a))];return DotDataUtil.hexToBytes(s.join(""))}}class DotPadProtocol{static getSync(){return["AA","55"]}static getLength(t){return["00",DotDataUtil.decimalToHex(t.length+6)]}static getDestId(t){return[DotDataUtil.decimalToHex(t)]}static getCommandType(){return["02","00"]}static getDisplayMode(t){return t?["80"]:["00"]}static getStartCell(t){return[DotDataUtil.decimalToHex(t)]}static getDataBody(t){return DotDataUtil.bytesToHexList(t)}static getCheckSum(t,e,a,i,s){const o=[...t,...e,...a,...i,...s];let r=165;for(const t of o)r^=parseInt(t,16);return DotDataUtil.decimalToHex(r)}}class DotDataUtil{static bytesToHex(t){return Array.from(t,(t=>t.toString(16).padStart(2,"0"))).join("")}static bytesToHexList(t){return Array.from(t,(t=>t.toString(16).padStart(2,"0")))}static decimalToHex(t){return Number(t).toString(16).padStart(2,"0")}static hexToBytes(t){if(t.length%2!=0)throw new Error("Odd number of hex digits");const e=t.length/2,a=new Uint8Array(e);for(let i=0;i<e;i++){const e=parseInt(t.substring(2*i,2*i+2),16);if(isNaN(e))throw new Error("Expected hex string");a[i]=e}return a}}class BrailleWordWrap{static DOUBLE_ZERO="00";constructor(t,e){this.cellSizeHex=2*t,this.brailleHexData=e}toWrappHex(){let t=this.processHexData();return this.generateWrappedHexList(t)}processHexData(){let t=this.brailleHexData.trim().endsWith(BrailleWordWrap.DOUBLE_ZERO),e=this.brailleHexData.split(BrailleWordWrap.DOUBLE_ZERO),a=[];for(let t=0;t<e.length;t++)a[t]=e[t].replace(/\s+/g,"")+BrailleWordWrap.DOUBLE_ZERO;if(!t&&a.length>0){let t=a.length-1;a[t]=this.removeTrailingDoubleZero(a[t])}return a}generateWrappedHexList(t){let e=[],a=[];for(let i of t)this.appendDataToSegment(i,a,e);return a.length>0&&e.push(this.padSegment(a.join(""))),e}appendDataToSegment(t,e,a){e.join("").length+t.length<=this.cellSizeHex||(e.length>0&&a.push(this.padSegment(e.join(""))),e.length=0),e.push(t)}padSegment(t){for(;t.length<this.cellSizeHex;)t+="0";return t}removeTrailingDoubleZero(t){return t.substring(0,t.length-2)}addSpacesBetweenEveryTwoCharacters(t){let e=t.join(""),a=[];for(let t=0;t<e.length;t+=2)t>0&&a.push(" "),a.push(e.substring(t,Math.min(t+2,e.length)));return a.join("")}}export{DotPadSDK};